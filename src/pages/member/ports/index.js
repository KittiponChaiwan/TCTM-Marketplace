// ** React Imports
import React, { useEffect, useState, useCallback } from 'react'

// ** MUI Imports
import Box from '@mui/material/Box'
import Link from '@mui/material/Link'
import Card from '@mui/material/Card'
import Grid from '@mui/material/Grid'
import Stack from '@mui/material/Stack'
import Hidden from '@mui/material/Hidden'
import Button from '@mui/material/Button'
import Divider from '@mui/material/Divider'
import Container from '@mui/material/Container'
import Typography from '@mui/material/Typography'
import IconButton from '@mui/material/IconButton'
import ButtonBase from '@mui/material/ButtonBase'
import Breadcrumbs from '@mui/material/Breadcrumbs'
import CardActionArea from '@mui/material/CardActionArea'

// ** Material-UI Icons Imports
import DeleteIcon from '@mui/icons-material/Delete'
import MailOutlineIcon from '@mui/icons-material/MailOutline'

// ** MDI Icon Imports
import Send from 'mdi-material-ui/Send'
import CircleSmall from 'mdi-material-ui/CircleSmall'

// ** axios import
import axios from 'axios'

// ** component Import
import DialogPost from './DialogPost'

const Posts = () => {
  // ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏ï‡∏±‡∏ßsweetalert2
  const Swal = require('sweetalert2')

  const [openDialogPost, setOpenDialogPost] = useState(false)

  // ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  const [userId, setUserId] = useState('') // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user_Id
  const [myPose, setMyPose] = useState('') // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• My pose

  // ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏à‡∏≤‡∏Å local Storage
  useEffect(() => {
    const userIdFromLocalStorage = localStorage.getItem('Member_Id')
    if (userIdFromLocalStorage) {
      setUserId(userIdFromLocalStorage)
    }
  }, [])

  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• My pose ‡∏à‡∏≤‡∏Å Api
  const fetchData = useCallback(async () => {
    try {
      const response = await axios.get(
        `${process.env.NEXT_PUBLIC_API}TCTM.requirements.allrequirement?user_id=${userId}`
      )
      setMyPose(response.data.message.Data)
    } catch (error) {
      console.error(error)
    }
  }, [userId])

  // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ fetchData ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà User Id ‡πÄ‡∏õ‡∏•‡∏µ‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
  useEffect(() => {
    fetchData()
  }, [userId, fetchData])

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  const handleDeleteSubmit = reqId => {
    Swal.fire({
      title: '‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?',
      icon: 'warning',
      showCancelButton: true,
      confirmButtonText: '‡πÉ‡∏ä‡πà',
      cancelButtonText: '‡πÑ‡∏°‡πà'
    }).then(result => {
      if (result.isConfirmed) {
        const data = {
          req_id: reqId
        }

        axios
          .put(`${process.env.NEXT_PUBLIC_API}TCTM.requirements.deleterequirement`, data)
          .then(function (response) {
            console.log(response)

            if (response.status === 200) {
              Swal.fire({
                icon: 'success',
                title: '‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏™‡∏£‡πá‡∏à',
                text: '‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß'
              })
              fetchData()
            } else {
              Swal.fire({
                icon: 'error',
                title: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
                text: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ'
              })
            }
          })
          .catch(function (error) {
            console.log(error)

            Swal.fire({
              icon: 'error',
              title: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
              text: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ'
            })
          })
      } else if (result.isDenied) {
        console.log('cancelled delete')
      }
    })
  }

  return (
    <Container maxWidth='xl'>
      <Box>
        {/* ‡πÅ‡∏ó‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÜ */}
        <Box sx={{ width: '100%' }}>
          <Card
            sx={{
              width: '100%',
              height: '100px',
              mb: '20px',
              p: '20px 25px 20px',
              bgcolor: '#FDEDE8',
              border: '1px solid #FDEDE8'
            }}
          >
            <Grid container alignItems='center'>
              <Grid item xs={12} sm={8} md={8}>
                <Typography variant='h4' fontSize='1.3rem bold' color='#FA896B'>
                  Posts
                </Typography>
                <Typography variant='body1' fontSize='1.3rem bold'>
                  Tell me your requirements
                </Typography>
              </Grid>
              <Hidden smDown>
                <Grid item sm={4} md={4} sx={{ display: 'flex', justifyContent: 'flex-end' }}>
                  <MailOutlineIcon sx={{ fontSize: 52, color: '#FA896B' }} />
                </Grid>
              </Hidden>
            </Grid>
          </Card>
        </Box>
        {/* ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤ */}
        <Box sx={{ width: '100%' }}>
          <Card>
            <Grid container direction='column'>
              <Grid item>
                <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', padding: 4 }}>
                  <Typography variant='h6' fontSize='1.3rem bold'>
                    My Posts
                  </Typography>
                  {/* ‡∏õ‡∏∏‡πà‡∏° POST */}
                  <Button variant='contained' color='primary' onClick={() => setOpenDialogPost(true)}>
                    ADD POST
                  </Button>
                </Box>
              </Grid>
              <Divider />
            </Grid>
          </Card>
        </Box>
      </Box>
      {/* üì®üì® Props üì®üì® */}
      <DialogPost open={openDialogPost} handleClose={() => setOpenDialogPost(false)} userId={userId} />
      {/* üì®üì® Props üì®üì® */}
    </Container>
  )
}

export default Posts
